/*    Copyright (C) 2012 GP Orcullo
 *
 *    This file is part of rt-8p8c, an ethernet based interface for LinuxCNC.
 *
 *    Portions of this code is based on stepgen.c
 *    by John Kasunich, Copyright (C) 2003-2007
 *
 *    This program is free software; you can redistribute it and/or modify
 *    it under the terms of the GNU General Public License as published by
 *    the Free Software Foundation; either version 3 of the License, or
 *    (at your option) any later version.
 *
 *    This program is distributed in the hope that it will be useful,
 *    but WITHOUT ANY WARRANTY; without even the implied warranty of
 *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *    GNU General Public License for more details.
 *
 *    You should have received a copy of the GNU General Public License
 *    along with this program; if not, write to the Free Software
 *    Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301 USA
 */

component rt8p8c "Ethernet based interface for LinuxCNC";

description """
   Usage: loadrt rt8p8c lport=<local-port> client_ip=<client-ip> rport=<client-port> delay=<rxtx delay>
""";

pin in float	#.velocity-cmd[4] = 0.0 "Desired motor velocity";
pin in float	#.position-cmd[4] = 0.0 "Desired motor position";

pin in bit	#.enable[4]	= 0;
pin in bit	pin.##.out[16]	= 0	"Digital output";
pin out bit	pin.##.in[16]	= 0	"Digital inputs";
pin out u32	port_input	= 0;

pin out s32	supervisor_state	"Supervisor thread state machine status";
pin out s32	cycle_time		"Loop period in 10us";
pin out s32	#.counts[4]	= 0	"Feedback position in counts";
pin out float	#.position-fb[4]= 0.0	"Feedback position in position units";
pin out bit	ready		= 0	"Module state";

param rw u32	reply_delay	= 0	"Reply delay in 10us, set to 0 to auto calculate";
param rw u32	#.stepwidth[4]	= 1	"Minimum pulse width of step pulse in 10 us.";
param rw u32	#.stepspace[4]	= 1	"Minimum spacing between two step pulses in 10 us.";
param rw u32	#.dirsetup[4]	= 1	"Minimum time from a direction change to the beginning of the next step pulse in 10 us.";
param rw u32	#.dirhold[4]	= 1	"Minimum time from the beginning of a step pulse to a direction change in 10 us.";
param rw float	#.scale[4]	= 1.0	"Steps per position unit.";
param rw float	#.maxvel[4]	= 1.0	"Maximum velocity";
param rw float	#.maxaccel[4]	= 1.0	"Maximum acceleration";
param rw bit	#.mode[4]	= 0	"Velocity/Position Mode (true = Position Mode)";
param rw bit	pin.##.dir[16]	= 1	"Digital IO direction (true = input)";

variable u32 txbuf[16]		= 0;
variable u32 txsize		= 0;
variable int tx_ret		= 0;

variable s32 rxbuf[16]		= 0;
variable int rx_ret		= 0;

variable int do_read		= 0;
variable int do_write		= 0;
variable int do_stepgen		= 0;

variable long old_dtns		= 0;	/* update_freq funct period in nsec */
variable double dt		= 0;	/* update_freq period in seconds */
variable double recip_dt	= 0;	/* recprocal of period, avoids divides */
variable double scale_inv[4]	= 1.0;	/* inverse of scale */
variable u32 old_stepwidth[4]	= 0;
variable u32 old_stepspace[4]	= 0;
variable u32 old_dirhold[4]	= 0;
variable u32 old_dirsetup[4]	= 0;
variable double old_vel[4]	= 0;
variable double old_scale[4]	= 0;
variable int printed_error[4]	= 0;	/* flag to avoid repeated printing */
variable double old_pos[4]	= 0;
variable s32 old_count[4]	= 0;
variable int64_t accum[4]	= 0;
variable s32 accum_diff		= 0;

option singleton;
option extra_setup;
option extra_cleanup;

function read "Read status from the RT-8p8c board";
function write "Send data to the RT-8p8c board";
function stepgen "Software step generator";
function supervisor "Communications controller";

license "GPL";
author "GP Orcullo";

;;
#include <linux/net.h>
#include <linux/in.h>
#include "rtapi_math.h"

#include "/usr/local/rtnet/include/rtnet.h"

#define MAXGEN		4
#define MAXIO		16

#define toRST		0x5453523E
#define frRST		0x5453523C
#define toCMD		0x444D433E
#define frCMD		0x444D433C
#define toCFG		0x4746433E
#define frCFG		0x4746433C

#define TX_TIMEOUT	2
#define RX_TIMEOUT	1
#define RXTXDELAY	20		/* Total rx + tx time in 10us */
#define UDP_RPORT	8888
#define UDP_LPORT	9999
#define CLIENT_IP	"10.0.0.2"

#define STEPBIT		17		/* bit location in DDS accum */
#define STEP_MASK	(1<<STEPBIT)
#define BASEFREQ	100000		/* Base freq of the PIC stepgen in ns */

#define PERIODFP 	((double)1.0 / (double)(BASEFREQ))
#define VELSCALE	((double)(1L << STEPBIT) * PERIODFP)
#define ACCELSCALE	(VELSCALE * PERIODFP)

#define TIMEOUT_RST	10
#define TIMEOUT_CFG	1
#define RCV_TIMEOUT	(rx_ret == -ETIMEDOUT)

#define sizeofTX(a)	((a) * sizeof(long))
#define rcv_reply(a)	((rx_ret >= 4) && (rxbuf[0] == (a)))
#define get_cycletime()	(rxbuf[1])
#define get_position(a)	(rxbuf[2 + (a)])
#define get_port_inp()	(rxbuf[2 + MAXGEN])

/* the following procedures are converted to macros, to solve
   the following error:

	RTAPI: Task 1[0xxxxxxxxx]: Fault with vec=14, signo=11, ip=xxxxxx.
	RTAPI: This fault may not be recoverable without rebooting.

   this is an ugly hack!
*/
#if 1

#define update_velocity(a, b)							\
	(txbuf[2 + (a)] = (b))

/* the pin port numbering is different to the physical pinout */
#define pin2int(a, b)								\
	do {									\
		(a)  = 0;							\
		(a) |= ((b(3 ) ? 1 : 0) << 0 );					\
		(a) |= ((b(4 ) ? 1 : 0) << 1 );					\
		(a) |= ((b(2 ) ? 1 : 0) << 2 );					\
		(a) |= ((b(0 ) ? 1 : 0) << 3 );					\
		(a) |= ((b(1 ) ? 1 : 0) << 4 );					\
		(a) |= ((b(5 ) ? 1 : 0) << 5 );					\
		(a) |= ((b(7 ) ? 1 : 0) << 6 );					\
		(a) |= ((b(6 ) ? 1 : 0) << 7 );					\
		(a) |= ((b(8 ) ? 1 : 0) << 8 );					\
		(a) |= ((b(9 ) ? 1 : 0) << 9 );					\
		(a) |= ((b(10) ? 1 : 0) << 10);					\
		(a) |= ((b(11) ? 1 : 0) << 11);					\
		(a) |= ((b(12) ? 1 : 0) << 12);					\
		(a) |= ((b(13) ? 1 : 0) << 13);					\
		(a) |= ((b(14) ? 1 : 0) << 14);					\
		(a) |= ((b(15) ? 1 : 0) << 15);					\
	} while (0)

#define int2pin(a, b)								\
	do {									\
		b(0)  = ((a) & (1 << 3 )) ? true : false;			\
		b(1)  = ((a) & (1 << 4 )) ? true : false;			\
		b(2)  = ((a) & (1 << 2 )) ? true : false;			\
		b(3)  = ((a) & (1 << 0 )) ? true : false;			\
		b(4)  = ((a) & (1 << 1 )) ? true : false;			\
		b(5)  = ((a) & (1 << 5 )) ? true : false;			\
		b(6)  = ((a) & (1 << 7 )) ? true : false;			\
		b(7)  = ((a) & (1 << 6 )) ? true : false;			\
		b(8)  = ((a) & (1 << 8 )) ? true : false;			\
		b(9)  = ((a) & (1 << 9 )) ? true : false;			\
		b(10) = ((a) & (1 << 10)) ? true : false;			\
		b(11) = ((a) & (1 << 11)) ? true : false;			\
		b(12) = ((a) & (1 << 12)) ? true : false;			\
		b(13) = ((a) & (1 << 13)) ? true : false;			\
		b(14) = ((a) & (1 << 14)) ? true : false;			\
		b(15) = ((a) & (1 << 15)) ? true : false;			\
	} while (0)

/* the DDS uses 32 bit counter, this code converts that counter into 64 bits */
#define update_accum()								\
	do {									\
		for (i = 0; i < MAXGEN; i++) {					\
			accum_diff = get_position(i) - old_count[i];		\
			old_count[i] = get_position(i);				\
			accum[i] += accum_diff;					\
		}								\
	} while (0)	

#define update_output()								\
	do {									\
		for (i = 0; i < MAXGEN; i++) {					\
			_counts(i) = accum[i] >> STEPBIT;			\
			_position_fb(i) = (float)(accum[i]) * scale_inv[i];	\
		}								\
		int2pin(get_port_inp(), pin_in);				\
		port_input = get_port_inp();					\
		cycle_time = get_cycletime();					\
	} while (0)

#define send_reset()								\
	do {									\
		txbuf[0] = toRST;						\
		txsize = sizeof(u32);						\
	} while (0)

/* velocity values already updated in stepgen() */
#define send_cmd()								\
	do {									\
		txbuf[0] = toCMD;						\
		txbuf[1] = reply_delay;						\
		txbuf[MAXGEN + 2] = 0; /* TODO: PWM value */			\
		pin2int(txbuf[MAXGEN + 3], pin_dir);	/* TRIS bits */		\
		pin2int(txbuf[MAXGEN + 4], pin_out);	/* LAT bits */		\
		txsize = sizeof(u32) * (MAXGEN + 5);				\
	} while (0)

#define send_cfg()								\
	do {									\
		txbuf[0] = toCFG;						\
		for (j = 1; j <= MAXGEN; j++)					\
			txbuf[j] = _stepwidth(j-1);				\
		for (i = j; i < (j + MAXGEN); i++)				\
			txbuf[i] = _dirsetup(i-j);				\
		for (j = i; j < (i + MAXGEN); j++)				\
			txbuf[j] = _dirhold(j-i);				\
		txsize = j * sizeof(u32);					\
	} while (0)

#define send_idle()								\
	do {									\
		txbuf[0] = toCMD;						\
		txbuf[1] = reply_delay;						\
		for (i = 2; i < (MAXGEN + 2); i++)				\
			txbuf[i] = 0;						\
		txsize = i * sizeof(u32);					\
	} while (0)

#define check_period_change(a)							\
	do {									\
		if ((a) != old_dtns) {						\
			old_dtns = (a);						\
			dt = (a) * 0.000000001;					\
			recip_dt = 1.0 / dt;					\
		}								\
	} while (0)

#define check_stepwidth_change(a, flag)						\
	do {									\
		if (_stepwidth((a)) != old_stepwidth[(a)]) {			\
			if (_stepwidth((a)) == 0)				\
				_stepwidth((a)) = 1;				\
			old_stepwidth[a] = _stepwidth((a));			\
		(flag) += 1;							\
		}								\
	} while (0)

#define check_stepspace_change(a, flag)						\
	do {									\
		if (_stepspace((a)) != old_stepspace[(a)]) {			\
			if (_stepspace((a)) == 0)				\
				_stepspace((a)) = 1;				\
			old_stepspace[(a)] = _stepspace((a));			\
			/* dirhold must be less than step period */		\
			if (_dirhold((a)) >= _stepwidth((a)) + _stepspace((a)))	\
				_dirhold((a)) = _stepwidth((a)) 		\
						+ _stepspace((a)) - 1;		\
			(flag) += 1;						\
		}								\
	} while (0)

#define check_dirsetup_change(a, flag)						\
	do {									\
		if (_dirsetup((a)) != old_dirsetup[(a)]) {			\
			if (_dirsetup((a)) == 0)				\
				_dirsetup((a)) = 1;				\
			old_dirsetup[(a)] = _dirsetup((a));			\
			(flag) += 1;						\
		}								\
	} while (0)

#define check_dirhold_change(a, flag)						\
	do {									\
		if (_dirhold((a)) != old_dirhold[(a)]) {			\
			if (_dirhold((a)) == 0)					\
				_dirhold((a)) = 1;				\
			/* dirhold must be less than step period */		\
			if (_dirhold((a)) >= _stepwidth((a)) + _stepspace((a)))	\
				_dirhold((a)) = _stepwidth((a))			\
				+ _stepspace((a)) - 1;				\
			old_dirhold[(a)] = _dirhold((a));			\
			(flag) += 1;						\
		}								\
	} while (0)

#define check_scale_change(a)							\
	do {									\
		if (_scale((a)) != old_scale[(a)]) {				\
			old_scale[(a)] = _scale((a));				\
			/* scale must not be 0 */				\
			if ((_scale((a)) < 1e-20) && (_scale((a)) > -1e-20))	\
				_scale((a)) = 1.0;				\
			scale_inv[(a)] = (1.0 / (1L << STEPBIT)) / _scale((a));	\
		}								\
	} while (0)

#define check_params(flag, period)						\
	do {									\
		check_period_change((period));					\
		(flag) = 0;							\
		for (i = 0; i < MAXGEN; i++) {					\
			check_stepwidth_change(i, (flag));			\
			check_stepspace_change(i, (flag));			\
			check_dirsetup_change(i, (flag));			\
			check_dirhold_change(i, (flag));			\
			check_scale_change(i)	;				\
		}								\
	} while (0)

#define print_rst_error(a, max)							\
	do {									\
		if ((a)++ == 0) {						\
			rtapi_print_msg(RTAPI_MSG_ERR, "RT-8p8c: Reset error\n");\
		} else if ((a) == ((max) + 1)) {				\
			rtapi_print_msg(RTAPI_MSG_ERR,				\
				"RT-8p8c: Reset error occured for more than "	\
				"%d times\n", (max));				\
		} else if ((a) > (max)) {					\
			(a) = (max) + 2;					\
		}								\
	} while (0)

#endif

static volatile int sockfd = -1;

int delay = RXTXDELAY;
RTAPI_MP_INT(delay, "RX+TX delay in 10us");
long timeout = 500000000L;	/* 500 ms */
RTAPI_MP_LONG(timeout, "Receive timeout in ns, must be half of thread period");
int lport = UDP_LPORT;
RTAPI_MP_INT(lport, "Local UDP listen port");
int rport = UDP_RPORT;
RTAPI_MP_INT(rport, "Remote client UDP listen port");
char *client_ip = CLIENT_IP;
RTAPI_MP_STRING(client_ip, "Remote client IP address");

typedef enum {
        RST, RSTWAIT,
	GETCYCLETIME, SETREPLYDELAY,
	CFG, CFGWAIT,
	TXRXDELAY,
	TXRXREADY
} STATES;

EXTRA_SETUP()
{
	struct sockaddr_in local_addr;
	struct sockaddr_in server_addr;
	int ret = 0;
	int64_t rxtimeout;

	rxtimeout = timeout;

	/* Set address structures to zero. */
	memset(&local_addr, 0, sizeof(struct sockaddr_in));
	memset(&server_addr, 0, sizeof(struct sockaddr_in));

	// Set address information structures
	local_addr.sin_family		= AF_INET;
	local_addr.sin_addr.s_addr	= INADDR_ANY;

	server_addr.sin_family		= AF_INET;
	server_addr.sin_addr.s_addr	= rt_inet_aton(client_ip);
	server_addr.sin_port		= htons(rport);

	// Create new socket.
	sockfd = rt_dev_socket(AF_INET, SOCK_DGRAM, 0);
	if (sockfd < 0) {
		rtapi_print_msg(RTAPI_MSG_ERR,
			"RT-8p8c: Error opening socket: %d\n", sockfd);
		return -1;
	}

	// Set timeout for socket in blocking mode
	ret = rt_dev_ioctl(sockfd, RTNET_RTIOC_TIMEOUT, &rxtimeout);
	if (ret < 0) {
		rt_dev_close(sockfd);
		rtapi_print_msg(RTAPI_MSG_ERR,
			"RT-8p8c: Setting socket option failed with error %d",
			ret);
		return ret;
	}

	local_addr.sin_port = htons(lport);
	// Bind socket to local address.
	ret = rt_dev_bind(sockfd, (struct sockaddr *) &local_addr,
			sizeof(struct sockaddr_in));
	if (ret < 0) {
		rt_dev_close(sockfd);
		rtapi_print_msg(RTAPI_MSG_ERR,
			"RT-8p8c: Binding socket failed with error %d\n", ret);
		return ret;
	}

	// Specify destination address for socket.
	rt_dev_connect(sockfd, (struct sockaddr *) &server_addr,
			sizeof(struct sockaddr_in));

	if (ret < 0) {
		rt_dev_close(sockfd);
		rtapi_print_msg(RTAPI_MSG_ERR,
			"RT-8p8c: Connecting to remote failed with error %d\n", ret);
		return ret;
	}
	return 0;
}


EXTRA_CLEANUP()
{
	if (!(sockfd < 0))
		rt_dev_close(sockfd);
}

FUNCTION(stepgen)
{
	long min_step_period;
	double max_vel, desired_vel, max_accl, vel_cmd, dv, new_vel;
	double dp, pos_cmd, curr_pos, match_accl, match_time, avg_v, est_out, est_cmd, est_err;
	int i;

	for (i = 0; (i < MAXGEN) && do_stepgen; i++) {

		/* test for disabled stepgen */
		if (!_enable(i)) {
			/* set velocity to zero */
			update_velocity(i, 0);
			continue;
		}

		/* calculate velocity limit */
		min_step_period = _stepwidth(i) + _stepspace(i);
		max_vel = 1.0 / (min_step_period * 0.00001);

		/* check for user specified velocity limit parameter */
		if (_maxvel(i) <= 0.0) {
			/* set to zero if negative */
			_maxvel(i) = 0.0;
		} else {
			/* parameter is non-zero, compare to max_vel */
			desired_vel = _maxvel(i) * fabs(_scale(i));
			if (desired_vel > max_vel) {
				/* parameter is too high, complain about it */
				if (!printed_error[i]) {
					rtapi_print_msg(RTAPI_MSG_ERR,
							"RT-8p8c: Channel %d: "
							"The requested maximum "
							"velocity of %d steps/sec"
							" is too high.\n",
							i, (int)desired_vel);
					rtapi_print_msg(RTAPI_MSG_ERR,
							"RT-8p8c: The maximum "
							"possible frequency is "
							"%d steps/second\n",
							(int)max_vel);
					printed_error[i] = 1;
				}
				/* parameter is too high, limit it */
				_maxvel(i) = max_vel / fabs(_scale(i));
			} else {
				/* lower max_vel to match parameter */
				max_vel = _maxvel(i) * fabs(_scale(i));
			}
		}

		/* set internal accel limit to its absolute max, which is
		   zero to full speed in one thread period */
		max_accl = max_vel * recip_dt;

		/* check for user specified accel limit parameter */
		if (_maxaccel(i) <= 0.0) {
			/* set to zero if negative */
			_maxaccel(i) = 0.0;
		} else {
			/* parameter is non-zero, compare to max_accl */
			if ((_maxaccel(i) * fabs(_scale(i))) > max_accl) {
				/* parameter is too high, lower it */
				_maxaccel(i) = max_accl / fabs(_scale(i));
			} else {
				/* lower limit to match parameter */
				max_accl = _maxaccel(i) * fabs(_scale(i));
			}
		}

 
		if (_mode(i) == 0) {
			/* calculate velocity command in counts/sec */
			vel_cmd = _velocity_cmd(i) * _scale(i);

			/* apply frequency limit */
			if (vel_cmd > max_vel) {
				vel_cmd = max_vel;
			} else if (vel_cmd < -max_vel) {
				vel_cmd = -max_vel;
			}

			/* calc max change in frequency in one period */
			dv = max_accl * dt;

			/* apply accel limit */
			if (vel_cmd > (old_vel[i] + dv)) {
				new_vel = old_vel[i] + dv;
			} else if (vel_cmd < (old_vel[i] - dv)) {
				new_vel = old_vel[i] - dv;
			} else {
				new_vel = vel_cmd;
			}
		} else {
			/* calculate position command in counts */
			pos_cmd = _position_cmd(i) * _scale(i);
			/* calculate velocity command in counts/sec */
			vel_cmd = (pos_cmd - old_pos[i]) * recip_dt;
			old_pos[i] = pos_cmd;
			
			curr_pos = (double)(accum[i]) * (1.0 / (1L << STEPBIT));

			/* determine which way we need to ramp to match velocity */
			if (vel_cmd > old_vel[i])
				match_accl = max_accl;
			else 
				match_accl = -max_accl;
			
			/* determine how long the match would take */
			match_time = (vel_cmd - old_vel[i]) / match_accl;
			/* calc output position at the end of the match */
			avg_v = (vel_cmd + old_vel[i]) * 0.5;
			est_out = curr_pos + avg_v * match_time;
			/* calculate the expected command position at that time */
			est_cmd = pos_cmd + vel_cmd * (match_time - 1.5 * dt);
			/* calculate error at that time */
			est_err = est_out - est_cmd;

			if (match_time < dt) {
				/* we can match velocity in one period */
				if (fabs(est_err) < 0.0001) {
					/* after match the position error will be acceptable */
					/* so we just do the velocity match */
					new_vel = vel_cmd;
				} else {
					/* try to correct position error */
					new_vel = vel_cmd - 0.5 * est_err * recip_dt;
					/* apply accel limits */
					if (new_vel > (old_vel[i] + max_accl * dt)) {
						new_vel = old_vel[i] + max_accl * dt;
					} else if (new_vel < (old_vel[i] - max_accl * dt)) {
						new_vel = old_vel[i] - max_accl * dt;
					}
				}
			} else {
				/* calculate change in final position if we ramp in the
				opposite direction for one period */
				dv = -2.0 * match_accl * dt;
				dp = dv * match_time;
				/* decide which way to ramp */
				if (fabs(est_err + dp * 2.0) < fabs(est_err)) {
					match_accl = -match_accl;
				}
				/* and do it */
				new_vel = old_vel[i] + match_accl * dt;
			}
			
			/* apply frequency limit */
			if (vel_cmd > max_vel) {
				vel_cmd = max_vel;
			} else if (vel_cmd < -max_vel) {
				vel_cmd = -max_vel;
			}
		}

		old_vel[i] = new_vel;
		/* calculate new velocity cmd */
		update_velocity(i, (new_vel * VELSCALE));
	}

	if (do_stepgen)
		send_cmd();
}

FUNCTION(read)
{
	if (do_read) {
		memset(&rxbuf, 0, sizeof(rxbuf));
		/* Block until packet is received. */
		rx_ret = rt_dev_recv(sockfd, (void*)&rxbuf, sizeof(rxbuf), 0);

		if (rx_ret == -ETIMEDOUT) {
			/* ignore error during auto-delay routine */
			if (supervisor_state > SETREPLYDELAY) {
				rtapi_print_msg(RTAPI_MSG_ERR,
					"RT-8p8c: Receive timeout\n");
			}
		} else if(rx_ret < 0) {
			rtapi_print_msg(RTAPI_MSG_ERR,
				"RT-8p8c: Receive error: %d\n", rx_ret);
		}
	}
}

FUNCTION(write)
{
	if (do_write) {
		if (txsize) {
			tx_ret = rt_dev_send(sockfd, txbuf, txsize, 0);

			if(tx_ret < 0)
				rtapi_print_msg(RTAPI_MSG_ERR,
					"RT-8p8c: Transmit error: %d\n"
					, tx_ret);
		}
	}
}

FUNCTION(supervisor)
{
	static int	state = RST;
	static int	count = 0, sum = 0, tmp = 0;
	static int	rxerr = 0, rstcount = 0;
	int		i, j;

	switch (state) {
	case RST:
		do_read = true;
		do_write = true;
		do_stepgen = false;
		ready = false;
		send_reset();
		state = RSTWAIT;
		count = 0;
		break;
	case RSTWAIT:
		do_read = true;
		do_write = false;
		if (RCV_TIMEOUT) {
			if (count++ > TIMEOUT_RST) {
				state = RST;
				print_rst_error(rstcount, 5);
			} else {
				state = RSTWAIT;
			}
		} else if (rcv_reply(frRST)) {
			rstcount = 0;		/* reset error counter */
			if (reply_delay) {
				state = CFG;
				goto _cfg;
			} else {
				state = GETCYCLETIME;
				do_write = true;
				send_idle();
				count = 0;
				sum = 0;
				tmp = 0;
			}
		} else {
			state = RST;
			print_rst_error(rstcount, 5);
		}
		break;
	case GETCYCLETIME:
		do_read = true;
		if (rcv_reply(frCMD)) {
			/* wait until cycle period > half of thread period */
			if (get_cycletime() > (period / 20000)) {
				/* if the period has stabilized */
				if (tmp < get_cycletime()) {
					tmp = get_cycletime();
					count = 0;
					sum = 0;
				} else {
					count++;
					sum += get_cycletime();
				}
				/* get the average of 32 readings */
				if (count == 32) {
					state = SETREPLYDELAY;
					reply_delay = sum/count - delay;
					count = 0;
					sum = 0;
					tmp = 0;
				}
			}
			send_idle();
			do_write = true;
		} else {
			do_write = false;
			rtapi_print_msg(RTAPI_MSG_ERR,
					"RT-8p8c: Get cycle time error\n");
			state = RST;
		}
		break;
	case SETREPLYDELAY:
		do_read = true;
		do_write = true;
		if (rcv_reply(frCMD)) {
			/* if the period has stabilized */
			if (tmp < get_cycletime()) {
				tmp = get_cycletime();
				count = 0;
			} else {
				count++;
			}
			/* wait for 2 sec */
			if (count >= (2000000000L/period)) {
				state = CFG;
			}
			send_idle();
		} else {
			if (rx_ret == -ETIMEDOUT) {
				reply_delay--;
				state = SETREPLYDELAY;
				send_idle();
			} else {
				do_write = false;
				rtapi_print_msg(RTAPI_MSG_ERR,
						"RT-8p8c: Auto reply delay "
						"error\n");
				state = RST;
			}
		}
		break;
	case CFG:
_cfg:		do_read = true;
		do_write = true;
		check_params(j, period);
		send_cfg();
		state = CFGWAIT;
		count = 0;
		break;
	case CFGWAIT:
		do_read = true;
		do_write = false;
		if (RCV_TIMEOUT) {
			if (count++ > TIMEOUT_CFG)
				state = RST;
			else
				state = CFGWAIT;
		} else if (rcv_reply(frCFG)) {
			state = TXRXREADY;
			do_write = true;
			send_idle();
		} else {
			state = RST;
			rtapi_print_msg(RTAPI_MSG_ERR,
				"RT-8p8c: Sending config failed, "
				"performing reset\n");
		}
		break;
	case TXRXREADY:
		do_read = true;

		if (rcv_reply(frCMD)) {
			check_params(j, period);
			if (j) {
				/* update cfg */
				state = CFG;
				do_stepgen = false;
				ready = false;
				goto _cfg;
			}
			do_write = true;
			do_stepgen = true;
			ready = true;
			update_accum();
			update_output();
			if (rxerr)
				rxerr--;
		} else if (RCV_TIMEOUT && (rxerr++ < RX_TIMEOUT)) {
			/* allow for occassional timeouts but don't send
			   new commands and results */
			do_write = true;
			do_stepgen = false;
			send_idle();
			rtapi_print_msg(RTAPI_MSG_ERR,
				"RT-8p8c: Increase RX/TX delay or RX timeout\n");
		} else {
			rtapi_print_msg(RTAPI_MSG_ERR,
				"RT-8p8c: Too many timeouts, performing reset\n");
			do_write = false;
			do_stepgen = false;
			ready = false;
			state = RST;
		}
		break;
	default:
		do_read = false;
		do_write = false;
		do_stepgen = false;
		ready = false;
		state = RST;
	}

	supervisor_state = state;

}
